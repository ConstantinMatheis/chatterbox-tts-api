name: Build and Push Docker Images

on:
  push:
    tags: ['v*']
  release:
    types: [published]

env:
  DOCKER_HUB_USERNAME: travisvn
  IMAGE_NAME: chatterbox-tts-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant:
          - name: latest
            dockerfile: docker/Dockerfile.dockerhub
            platforms: linux/amd64,linux/arm64
            tags: |
              travisvn/chatterbox-tts-api:latest
              travisvn/chatterbox-tts-api:gpu
          - name: cpu
            dockerfile: docker/Dockerfile.dockerhub.cpu
            platforms: linux/amd64,linux/arm64
            tags: |
              travisvn/chatterbox-tts-api:cpu

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.variant.dockerfile }}
          platforms: ${{ matrix.variant.platforms }}
          push: true
          tags: |
            ${{ matrix.variant.tags }}
            ${{ steps.meta.outputs.tags && format('{0}-{1}', steps.meta.outputs.tags, matrix.variant.name) || '' }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-images:
    needs: build-and-push
    runs-on: ubuntu-latest

    strategy:
      matrix:
        variant: [latest, cpu]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Test Docker image
        run: |
          # Pull the built image
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }}

          # Run container in background
          docker run -d \
            --name test-container-${{ matrix.variant }} \
            -p 5123:5123 \
            -v ${{ github.workspace }}/voice-sample.mp3:/app/voice-sample.mp3:ro \
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }}

          # Wait for container to be ready
          timeout 300 bash -c 'until curl -f http://localhost:5123/health; do sleep 5; done'

          # Test basic API functionality
          curl -X POST http://localhost:5123/v1/audio/speech \
            -F "input=Docker Hub test" \
            --output test-${{ matrix.variant }}.wav

          # Verify audio file was created
          test -f test-${{ matrix.variant }}.wav

          # Check file size is reasonable (should be > 1KB)
          test $(stat -c%s test-${{ matrix.variant }}.wav) -gt 1000

          echo "âœ… ${{ matrix.variant }} variant test passed"

      - name: Cleanup
        if: always()
        run: |
          docker stop test-container-${{ matrix.variant }} || true
          docker rm test-container-${{ matrix.variant }} || true

  update-readme:
    needs: [build-and-push, test-images]
    runs-on: ubuntu-latest

    steps:
      - name: Update Docker Hub README
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          repository: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}
          readme-filepath: ./docs/DOCKER_HUB_GUIDE.md
