# Docker Hub Optimized Dockerfile
# This is the main image for Docker Hub - CUDA compatible, works on both GPU and CPU
FROM nvidia/cuda:12.4.1-runtime-ubuntu20.04

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Install Python 3.11 and system dependencies
RUN apt-get update && apt-get install -y \
    software-properties-common \
    && add-apt-repository ppa:deadsnakes/ppa \
    && apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-distutils \
    git \
    wget \
    curl \
    build-essential \
    ffmpeg \
    libsndfile1 \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Install uv (faster package manager)
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Set working directory
WORKDIR /app

# Create virtual environment
RUN uv venv --python 3.11

# Install PyTorch with CUDA support using uv (compatible with both GPU and CPU)
RUN uv pip install torch==2.6.0 torchvision==0.21.0 torchaudio==2.6.0 --index-url https://download.pytorch.org/whl/cu124

# Install base dependencies
RUN uv pip install setuptools fastapi uvicorn[standard] python-dotenv python-multipart requests psutil

# Install resemble-perth (required for watermarker)
RUN uv pip install resemble-perth

# Install chatterbox-tts
RUN uv pip install chatterbox-tts

# Copy application code
COPY app/ ./app/
COPY main.py ./
COPY voice-sample.mp3 ./voice-sample.mp3

# Create directories for volumes
RUN mkdir -p /cache /app/voice-samples

# Set default environment variables (Docker Hub optimized)
ENV PORT=5123
ENV EXAGGERATION=0.5
ENV CFG_WEIGHT=0.5
ENV TEMPERATURE=0.8
ENV VOICE_SAMPLE_PATH=/app/voice-sample.mp3
ENV MAX_CHUNK_LENGTH=280
ENV MAX_TOTAL_LENGTH=3000
ENV DEVICE=auto
ENV MODEL_CACHE_DIR=/cache
ENV HOST=0.0.0.0

# Memory management defaults
ENV MEMORY_CLEANUP_INTERVAL=5
ENV CUDA_CACHE_CLEAR_INTERVAL=3
ENV ENABLE_MEMORY_MONITORING=true

# NVIDIA/CUDA environment variables
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Add uv venv to PATH
ENV PATH="/app/.venv/bin:$PATH"

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash app && \
    chown -R app:app /app /cache
USER app

# Expose port
EXPOSE 5123

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5m --retries=3 \
    CMD curl -f http://localhost:5123/health || exit 1

# Run the application
CMD ["python", "main.py"] 